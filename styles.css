/* Q1: Static positioned div */
.static-box {
    position: static;
    width: 100px;
    height: 100px;
    background-color: lightcoral;
  }
  
  /* Q2: Relative positioned div */
  .relative-box {
    position: relative;
    top: 20px;
    left: 30px;
    width: 100px;
    height: 100px;
    background-color: lightblue;
  }
  
  /* Q3: Absolute positioned div inside a container */
  .container {
    position: relative;
    width: 200px;
    height: 200px;
    background-color: lightgrey;
    margin-top: 20px;
  }
  .absolute-box {
    position: absolute;
    top: 10px;
    left: 15px;
    width: 100px;
    height: 100px;
    background-color: lightgreen;
  }
  
  /* Q4: Fixed positioned div */
  .fixed-box {
    position: fixed;
    bottom: 10px;
    right: 10px;
    width: 100px;
    height: 100px;
    background-color: lightgoldenrodyellow;
  }
  
  /* Q5: Sticky positioned div */
  .sticky-box {
    position: sticky;
    top: 0;
    width: 100%;
    height: 50px;
    background-color: lightcoral;
    text-align: center;
    padding: 10px;
  }
  
  /* Content area to create scrolling */
  .content {
    padding: 20px;
    background-color: lightgrey;
    height: 800px;
  }
  
  /* Q6: Background cover image */
  .background-image {
    width: 100%;
    height: 200px;
    background-image: url('random\ \(1\).jpg'); /* Replace with your image path */
    background-size: cover;
    background-position: center;
    margin-top: 20px;
    text-align: center;
    color: white;
    padding: 70px 0;
  }
  
  /* Q7: Background image with repeat */
  .background-image-repeat {
    width: 100%;
    height: 200px;
    background-image: url('random\ \(1\).jpg'); /* Replace with your image path */
    background-repeat: repeat;
    margin-top: 20px;
    text-align: center;
    color: black;
    padding: 70px 0;
  }
  
  /* Q8: Overlapping Divs with z-index */
  .box1 {
    position: relative;
    width: 100px;
    height: 100px;
    background-color: lightblue;
    z-index: 1;
    margin: 20px;
  }
  .box2 {
    position: relative;
    width: 100px;
    height: 100px;
    background-color: coral;
    z-index: 2;
    margin: -60px 0 0 40px;
  }
  
  /* Q9: Flex Container with Row Direction */
  .flex-row-container {
    display: flex;
    flex-direction: row;
    gap: 10px;
    margin: 20px 0;
  }
  .flex-item {
    background-color: lightgreen;
    padding: 20px;
    text-align: center;
  }
  
  /* Q10: Flex Container with Column Direction */
  .flex-column-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin: 20px 0;
  }
  
  /* Q11: Flex Container with Space Evenly Justification */
  .flex-space-evenly-container {
    display: flex;
    justify-content: space-evenly;
    gap: 10px;
    margin: 20px 0;
  }
  
  /* Q12: Flex Container with Wrapping Items */
  .flex-wrap-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin: 20px 0;
  }
  
  /* Q13: Flex Container with Vertical Center Alignment */
  .flex-align-center-container {
    display: flex;
    align-items: center;
    gap: 10px;
    height: 200px;
    background-color: lightgray;
    margin: 20px 0;
  }
  .flex-item.tall {
    height: 100px;
    background-color: lightblue;
    padding: 10px;
    text-align: center;
  }
  .flex-item.medium {
    height: 60px;
    background-color: lightgreen;
    padding: 10px;
    text-align: center;
  }
  .flex-item.short {
    height: 30px;
    background-color: coral;
    padding: 10px;
    text-align: center;
  }
  
  /* Q14: Flex Container with Multiple Lines and Even Spacing */
  .flex-align-content-container {
    display: flex;
    flex-wrap: wrap;
    align-content: space-evenly;
    gap: 10px;
    height: 300px;
    background-color: lightyellow;
    margin: 20px 0;
  }
  
 /* Q15: Flex Container with Flex-grow Property */
.flex-grow-container {
    display: flex;
    gap: 10px;
    background-color: lightcyan;
    padding: 20px;
    margin: 20px 0;
  }
  .flex-item {
    background-color: lightcoral;
    padding: 20px;
    text-align: center;
    flex-grow: 1; /* Sets a default grow rate for all items */
  }
  .flex-item.grow {
    flex-grow: 2; /* The second item grows twice as much as the others */
  }
  
  